openapi: 3.0.3
info:
  title: Library Management API
  version: "1.0"
  description: REST API for managing books and members in a library system.

servers:
  - url: http://localhost:8080

paths:
  /books:
    get:
      summary: List all books
      responses:
        '200':
          description: A JSON array of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

    post:
      summary: Create a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

  /books/{id}:
    put:
      summary: Update a book by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Updated book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found

    delete:
      summary: Delete a book by id (only if available)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted successfully
        '400':
          description: Cannot delete book - borrowed or reserved
        '404':
          description: Book not found

  /books/{bookId}/borrow/{memberId}:
    post:
      summary: Borrow a book
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
        - name: memberId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book borrowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Book not available
        '404':
          description: Book or member not found

  /books/{bookId}/return:
    post:
      summary: Return a borrowed book
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found

  /members:
    get:
      summary: List all members
      responses:
        '200':
          description: A JSON array of members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'

    post:
      summary: Create a new member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberInput'
      responses:
        '201':
          description: Member created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'

  /members/{id}:
    put:
      summary: Update a member by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberInput'
      responses:
        '200':
          description: Updated member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '404':
          description: Member not found

    delete:
      summary: Delete a member (only if no borrowed books)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Member deleted successfully
        '400':
          description: Cannot delete member, has borrowed books
        '404':
          description: Member not found

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Clean Code"
        author:
          type: string
          example: "Robert C. Martin"
        isbn:
          type: string
          example: "9780132350884"
        publishedDate:
          type: string
          format: date
          example: "2008-08-01"
        availabilityStatus:
          type: string
          enum:
            - AVAILABLE
            - BORROWED
            - RESERVED
          example: AVAILABLE
        borrowedBy:
          type: integer
          nullable: true
          example: 2

    BookInput:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        publishedDate:
          type: string
          format: date
      required:
        - title
        - author

    Member:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Alice"
        email:
          type: string
          format: email
          example: "alice@example.com"

    MemberInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
      required:
        - name
        - email
